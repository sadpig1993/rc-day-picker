{"version":3,"sources":["../src/Day.js"],"names":[],"mappings":";;;;;;;;;;AAKA;;;;AACA;;;;;;;;;;8eANA;;;;;AASA;;;;;;;IAMqB,G;;;AA8BjB,iBAAY,IAAZ,EAAkB;AAAA;;AAAA;;AAAA,6KACL,IADK;;AAEd,cAAK,WAAL,GAAmB,MAAK,WAAL,CAAiB,IAAjB,OAAnB;AAFc;AAGjB;;AAED;;;;;;;;;;8CAMsB,K,EAAO;AACzB,gBAAM,yBAAiB,MAAM,SAAvB,CAAN;;AAEA,gBAAI,MAAM,YAAV,EAAwB;AACpB,0BAAU,QAAV,GAAqB,MAAM,YAA3B;AACH;AACD,gBAAI,MAAM,YAAV,EAAwB;AACpB,0BAAU,QAAV,GAAqB,MAAM,YAA3B;AACH;;AAED,mBAAO,SAAP;AACH;;;iCAEQ;AAAA,yBAUD,KAAK,KAVJ;AAAA,gBAGD,GAHC,UAGD,GAHC;AAAA,gBAID,UAJC,UAID,UAJC;AAAA,gBAKD,KALC,UAKD,KALC;AAAA,gBAMD,SANC,UAMD,SANC;AAAA,gBAOD,QAPC,UAOD,QAPC;AAAA,gBAQD,KARC,UAQD,KARC;AAAA,gBASD,SATC,UASD,SATC;;;AAYL,gBAAI,eAAe,EAAnB;;AAEA;AACA,gBAAM,YAAY,IAAI,QAAJ,OAAmB,MAAM,QAAN,EAArC;AACA,gBAAI,SAAJ,EAAe;AACX,6BAAa,IAAb,CAAkB,SAAlB;AACH;;AAED,wDACO,YADP,sBAEO,+BAAmB,GAAnB,EAAwB,KAAK,qBAAL,CAA2B,KAAK,KAAhC,CAAxB,CAFP;;AAKA;AACA,yBAAa,aAAa,GAAb,CAAiB;AAAA,6BAAgB,SAAhB,UAA8B,QAA9B;AAAA,aAAjB,EAA2D,IAA3D,CAAgE,EAAhE,CAAb;;AAEA,mBACI;AAAA;AAAA;AACI,+BAAa,SADjB;AAEI,6BAAW,CAAC,KAAD,GAAS,KAAK,WAAL,CAAiB,UAAjB,EAA6B,GAA7B,EAAkC,YAAlC,CAAT,GAA2D;AAF1E;AAIC,wBAAQ,EAAR,GAAa;AAJd,aADJ;AAQH;;AAED;;;;;;;;;;;oCAQY,O,EAAS,G,EAAK,S,EAAW;AACjC;AACA,gBAAI,CAAC,OAAL,EAAc;AACV,uBAAO,SAAP;AACH;AACD,gBAAM,WAAW,EAAjB;AACA,sBAAU,OAAV,CAAkB,oBAAY;AAAE,yBAAS,QAAT,IAAqB,IAArB;AAA4B,aAA5D;;AAEA,mBAAO,aAAK;AACR,wBAAQ,CAAR,EAAW,GAAX,EAAgB,QAAhB;AACH,aAFD;AAGH;;;;;;AA/GgB,G,CAEV,S,GAAY;AACf;AACA,SAAK,iBAAU,UAAV,CAAqB,IAArB,EAA2B,UAFjB;AAGf;AACA,WAAO,iBAAU,UAAV,CAAqB,IAArB,EAA2B,UAJnB;;AAMf;AACA,cAAU,iBAAU,IAAV,CAAe,UAPV;AAQd;AACD,eAAW,iBAAU,MATN;AAUf;AACA,kBAAc,iBAAU,IAXT;AAYf;AACA,kBAAc,iBAAU,IAbT;AAcf;AACA,gBAAY,iBAAU,IAfP;AAgBf;AACA,WAAO,iBAAU,IAjBF;AAkBf;AACA,eAAW,iBAAU;AAnBN,C;AAFF,G,CAwBV,Y,GAAe;AAClB,eAAW,EADO;AAElB,WAAO,KAFW;AAGlB,eAAW;AAHO,C;kBAxBL,G","file":"Day.js","sourcesContent":["/**\n* @file day\n* @author xijiawei@baidu.com\n*/\n\nimport React, { Component, PropTypes } from 'react';\nimport { getModifiersForDay } from './Utils.js';\n\n\n/**\n * Day组件类\n *\n * @class\n * @extends Component\n */\nexport default class day extends Component {\n\n    static propTypes = {\n        // 日期对应的Date对象\n        day: PropTypes.instanceOf(Date).isRequired,\n        // 当前月份的Date对象\n        month: PropTypes.instanceOf(Date).isRequired,\n\n        // 日期组件显示内容\n        children: PropTypes.node.isRequired,\n         // 自定义的className\n        className: PropTypes.string,\n        // 选中日期判断函数      \n        selectedDays: PropTypes.func,\n        // 禁止操作日期判断函数\n        disabledDays: PropTypes.func,\n        // 自定义日期点击事件回调函数\n        onDayClick: PropTypes.func,\n        // 日期是否显示\n        empty: PropTypes.bool,\n        // 自定义修饰器判断函数\n        modifiers: PropTypes.object,\n    };\n\n    static defaultProps = {\n        modifiers: {},\n        empty: false,\n        className: 'DayPicker-Day'\n    };\n\n    constructor(args) {\n        super(...args)\n        this.handleEvent = this.handleEvent.bind(this);\n    }\n\n    /**\n     * 合并自定义判断函数和Props传入的修饰器\n     *\n     * @param  {Object} props\n     * @return {Object} 最终的修饰器\n     */\n    getModifiersFromProps(props) {\n        const modifiers = { ...props.modifiers };\n\n        if (props.selectedDays) {\n            modifiers.selected = props.selectedDays;\n        }\n        if (props.disabledDays) {\n            modifiers.disabled = props.disabledDays;\n        }\n\n        return modifiers;\n    }\n\n    render() {\n\n        let { \n            day, \n            onDayClick, \n            empty, \n            modifiers, \n            children, \n            month,\n            className\n        } = this.props;\n\n        let dayModifiers = [];\n\n        // 判断该日期是否在本月内，不在则加上outside修饰器\n        const isOutside = day.getMonth() !== month.getMonth();\n        if (isOutside) {\n            dayModifiers.push('outside');\n        }\n\n        dayModifiers = [\n            ...dayModifiers,\n            ...getModifiersForDay(day, this.getModifiersFromProps(this.props)),\n        ];\n\n        // 根据修饰器生成对应的ClassName\n        className += dayModifiers.map(modifier => ` ${className}--${modifier}`).join('');\n\n        return (\n            <div \n                className = {className}\n                onClick = {!empty ? this.handleEvent(onDayClick, day, dayModifiers) : undefined}\n            >\n            {empty ? '' : children}\n            </div>\n        );\n    }\n\n    /**\n     * 处理日期点击事件回调函数\n     *\n     * @param  {Function}  handler 用户传入的点击函数\n     * @param  {Date}  day 所点日期的Date对象 \n     * @param  {Object} modifiers 修饰器对象\n     * @return {Function} \n     */\n    handleEvent(handler, day, modifiers) {\n        // 用户没有传入点击事件回调函数，则终止\n        if (!handler) {\n            return undefined;\n        }\n        const dayState = {};\n        modifiers.forEach(modifier => { dayState[modifier] = true; });\n\n        return e => {\n            handler(e, day, dayState);\n        }\n    } \n}"]}